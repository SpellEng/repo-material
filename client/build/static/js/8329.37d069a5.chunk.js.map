{"version":3,"file":"static/js/8329.37d069a5.chunk.js","mappings":"+IAEO,MAAMA,EAAgBC,IACzBC,EAAAA,GAAQC,QAAQ,CACZC,UAAW,cACXC,QAASJ,EACTK,SAAU,EACVC,MAAO,CAAEC,UAAW,SACtB,EAEOC,EAAcR,IACvBC,EAAAA,GAAQQ,MAAM,CACVN,UAAW,cACXC,QAASJ,EACTK,SAAU,EACVC,MAAO,CAAEC,UAAW,SACtB,C,gKCPN,MAgLA,EAhLwBG,KACpB,MAAMC,GAASC,EAAAA,EAAAA,OACRC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAA8BC,IAAmCN,EAAAA,EAAAA,UAAS,KAC1EO,EAAeC,IAAoBR,EAAAA,EAAAA,UAAS,KAC5CS,EAAiBC,IAAsBV,EAAAA,EAAAA,UAAS,IAmEjDW,EAAqBC,UACvB,IAAK,IAADC,EACA,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,GAADC,OAAIC,+BAAiC,wBAAAD,OAAwC,QAAxCJ,GAAuBM,EAAAA,EAAAA,aAAiB,IAAAN,OAAA,EAAjBA,EAAmBO,KAAO,CAClHC,QAAS,CACLC,cAAe,UAAYC,aAAaC,QAAQ,YAGxDzB,EAAiBe,EAASW,KAC9B,CAAE,MAAO/B,GACLgC,QAAQhC,MAAM,gCAAiCA,EACnD,GAoCJ,OAjCAiC,EAAAA,EAAAA,YAAU,KACNhB,IArDqBC,WAAa,IAADgB,QAC3Bb,EAAAA,EAAMC,IAAI,GAADC,OAAIC,+BAAiC,sCAAAD,OAAsD,QAAtDW,GAAqCT,EAAAA,EAAAA,aAAiB,IAAAS,OAAA,EAAjBA,EAAmBR,KAAO,CAC/GC,QAAS,CACLC,cAAe,UAAYC,aAAaC,QAAQ,YAErDK,MAAKC,IAEqB,IAADC,EADxB7B,GAAW,GACQ,MAAf4B,EAAIE,OACJxB,EAAyB,QAATuB,EAACD,EAAIL,YAAI,IAAAM,OAAA,EAARA,EAAUE,QAAOC,KAAO,OAADA,QAAC,IAADA,GAAAA,EAAGC,gBAE3C1C,EAAAA,EAAAA,IAAWqC,EAAIL,KAAKW,aACxB,IACDC,OAAMC,IACLpC,GAAW,GACXwB,QAAQa,IAAID,IACZ7C,EAAAA,EAAAA,IAAc,OAAH6C,QAAG,IAAHA,OAAG,EAAHA,EAAKpD,QAAQ,GAC1B,EAsCFsD,GAnCuB5B,WAAa,IAAD6B,QAC7B1B,EAAAA,EAAMC,IAAI,GAADC,OAAIC,+BAAiC,oCAAAD,OAAoD,QAApDwB,GAAmCtB,EAAAA,EAAAA,aAAiB,IAAAsB,OAAA,EAAjBA,EAAmBrB,KAAO,CAC7GC,QAAS,CACLC,cAAe,UAAYC,aAAaC,QAAQ,YAErDK,MAAKC,IAEqB,IAADY,EADxBxC,GAAW,GACQ,MAAf4B,EAAIE,OACJtB,EAA2B,QAATgC,EAACZ,EAAIL,YAAI,IAAAiB,OAAA,EAARA,EAAUT,QAAOC,KAAO,OAADA,QAAC,IAADA,GAAAA,EAAGC,gBAE7C1C,EAAAA,EAAAA,IAAWqC,EAAIL,KAAKW,aACxB,IACDC,OAAMC,IACLpC,GAAW,GACXwB,QAAQa,IAAID,IACZ7C,EAAAA,EAAAA,IAAc,OAAH6C,QAAG,IAAHA,OAAG,EAAHA,EAAKpD,QAAQ,GAC1B,EAoBFyD,GAjFwB/B,WAAa,IAADgC,QAC9B7B,EAAAA,EAAMC,IAAI,GAADC,OAAIC,+BAAiC,yCAAAD,OAAyD,QAAzD2B,GAAwCzB,EAAAA,EAAAA,aAAiB,IAAAyB,OAAA,EAAjBA,EAAmBxB,KAAO,CAClHC,QAAS,CACLC,cAAe,UAAYC,aAAaC,QAAQ,YAErDK,MAAKC,IAEJ,GADA5B,GAAW,GACQ,MAAf4B,EAAIE,OAAgB,CAAC,IAADa,EACpBzC,EAAoB0B,EAAIL,MACxB,MAAMqB,EAAoBC,MAASC,QAAQ,SAASC,SAC9CC,EAAiBH,MAASC,QAAQ,SAASG,IAAI,EAAG,SAASF,SAC3DG,EAAqC,QAAXP,EAAGf,EAAIL,YAAI,IAAAoB,OAAA,EAARA,EAAUZ,QAAOoB,IAChD,MAAMC,EAAYP,IAAOM,EAAeE,KAAM,cAAcN,SAC5D,OAAOK,GAAaR,GAAqBQ,EAAYJ,CAAc,IAEvE5C,EAAgC8C,EACpC,MACI3D,EAAAA,EAAAA,IAAWqC,EAAIL,KAAKW,aACxB,IACDC,OAAMC,IACLpC,GAAW,GACXwB,QAAQa,IAAID,IACZ7C,EAAAA,EAAAA,IAAc,OAAH6C,QAAG,IAAHA,OAAG,EAAHA,EAAKpD,QAAQ,GAC1B,EA2DFsE,EAAqB,GACtB,KAEH7B,EAAAA,EAAAA,YAAU,KACcf,WAChB,MAAM6C,EAAM,IAAIC,KAChB,IAAK,IAAIC,KAAgB7D,EAAe,CAEpC,GADmB,IAAI4D,KAAKC,EAAaC,YACxBH,GAA+B,YAAxBE,EAAa3B,OACjC,UACUjB,EAAAA,EAAM8C,IAAI,GAAD5C,OAAIC,+BAAiC,iCAAAD,OAAgC0C,EAAavC,KAAO,CAAEY,OAAQ,WAAa,CAC3HX,QAAS,CACLC,cAAe,UAAYC,aAAaC,QAAQ,YAErDK,MAAKC,IACe,MAAfA,EAAIE,QACJrB,GACJ,GAER,CAAE,MAAOjB,GACLgC,QAAQhC,MAAM,sCAAuCA,EACzD,CAER,GAGJoE,EAAa,GACd,CAAChE,KAGAiE,EAAAA,EAAAA,KAAA,OAAK3E,UAAU,0BAAyB4E,UACpCC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,YAAW4E,SAAA,EACtBC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,mBAAkB4E,SAAA,EAC7BD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,sBACJD,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CAAC9E,UAAU,4BAA4B+E,KAAK,UAAUC,QAASA,IAAMxE,EAAO,iBAAiBoE,SAAC,gBAEzGD,EAAAA,EAAAA,KAACM,EAAAA,EAAI,CACDC,KAAM,CAAEC,OAAQ,GAAIC,OAAQ,GAC5BC,WAAY3E,EACZV,UAAU,OACVsF,WAAYf,IACRI,EAAAA,EAAAA,KAACM,EAAAA,EAAKM,KAAI,CAAAX,UACNC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,oBAAmB4E,SAAA,EAC9BD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,iBACJC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,QAAO4E,SAAA,EAClBD,EAAAA,EAAAA,KAAA,MAAAC,SAAiB,OAAZL,QAAY,IAAZA,OAAY,EAAZA,EAAciB,QACnBX,EAAAA,EAAAA,MAAA,KAAG7E,UAAU,OAAM4E,SAAA,EAACC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAgB,OAAZL,QAAY,IAAZA,OAAY,EAAZA,EAAckB,gBAAgB,eAAa,gBAEtC,aAAb,OAAZlB,QAAY,IAAZA,OAAY,EAAZA,EAAc3B,SACV+B,EAAAA,EAAAA,KAAA,OAAK3E,UAAU,6BAA4B4E,UACvCC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,0CAAsCD,EAAAA,EAAAA,KAAA,KAAAC,SAAIjB,IAAOY,EAAaC,YAAYkB,OAAO,yBAGxFf,EAAAA,EAAAA,KAAA,OAAK3E,UAAU,qBAAoB4E,UAC/BC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,CAAG,qCAAiCD,EAAAA,EAAAA,KAAA,KAAAC,SAAIjB,IAAOY,EAAaC,YAAYkB,OAAO,yBAG3Fb,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,QAAO4E,SAAA,EAClBC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,OAAM4E,SAAA,EACjBC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAoB,OAAfvD,QAAe,IAAfA,OAAe,EAAfA,EAAiBsE,SAAsB,OAAbxE,QAAa,IAAbA,OAAa,EAAbA,EAAewE,QAAO,IAAc,OAAZpB,QAAY,IAAZA,OAAY,EAAZA,EAAckB,oBACrEd,EAAAA,EAAAA,KAAA,KAAAC,SAAG,4BAEPC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,OAAM4E,SAAA,EACjBD,EAAAA,EAAAA,KAAA,MAAAC,SAAqB,OAAhB7D,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB4E,UACvBhB,EAAAA,EAAAA,KAAA,KAAAC,SAAG,2BAEPC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,OAAM4E,SAAA,EACjBD,EAAAA,EAAAA,KAAA,MAAAC,SAAiC,OAA5B3D,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B0E,UACnChB,EAAAA,EAAAA,KAAA,KAAAC,SAAG,mCAEPC,EAAAA,EAAAA,MAAA,OAAK7E,UAAU,OAAM4E,SAAA,EACjBD,EAAAA,EAAAA,KAAA,MAAAC,SAAKjB,IAAOY,EAAaC,YAAYkB,OAAO,oBAC5Cf,EAAAA,EAAAA,KAAA,KAAAC,SAAG,mCASjC,C","sources":["Components/Messages/messages.js","Pages/Students/MySubscriptions/MySubscriptions.js"],"sourcesContent":["import { message } from \"antd\";\n\nexport const SuccessAlert = (messages) => {\n    message.success({\n        className: \"ant-message\",\n        content: messages,\n        duration: 4,\n        style: { marginTop: '40px' }\n    });\n}\nexport const ErrorAlert = (messages) => {\n    message.error({\n        className: \"ant-message\",\n        content: messages,\n        duration: 4,\n        style: { marginTop: '40px' }\n    });\n\n}\nexport const WarningAlert = (messages) => {\n    message.warning({\n        className: \"ant-message\",\n        content: messages,\n        duration: 4\n    });\n}","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { List, Typography, Button } from 'antd';\nimport './MySubscriptions.css';\nimport { isAuthenticated } from '../../../Components/Auth/auth';\nimport { useNavigate } from 'react-router-dom';\nimport moment from \"moment\"\nimport { ErrorAlert } from '../../../Components/Messages/messages';\n\nconst MySubscriptions = () => {\n    const router = useNavigate();\n    const [subscriptions, setSubscriptions] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [cancelledClasses, setCancelledClasses] = useState([]);\n    const [currentMonthCancelledClasses, setCurrentMonthCancelledClasses] = useState([]);\n    const [futureClasses, setFutureClasses] = useState([]);\n    const [previousClasses, setPreviousClasses] = useState([]);\n\n    const getCancelledClasses = async () => {\n        await axios.get(`${process.env.REACT_APP_BACKEND_URL}/scheduled-classes/student/cancelled/${isAuthenticated()?._id}`, {\n            headers: {\n                Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n            }\n        }).then(res => {\n            setLoading(false);\n            if (res.status === 200) {\n                setCancelledClasses(res.data);\n                const currentMonthStart = moment().startOf('month').toDate();\n                const nextMonthStart = moment().startOf('month').add(1, 'month').toDate();\n                const studentCurrentMonthClasses = res.data?.filter(scheduledClass => {\n                    const classDate = moment(scheduledClass.date, \"DD/MM/YYYY\").toDate();\n                    return classDate >= currentMonthStart && classDate < nextMonthStart;\n                });\n                setCurrentMonthCancelledClasses(studentCurrentMonthClasses);\n            } else {\n                ErrorAlert(res.data.errorMessage);\n            }\n        }).catch(err => {\n            setLoading(false);\n            console.log(err)\n            ErrorAlert(err?.message);\n        })\n    }\n\n    const getFutureClasses = async () => {\n        await axios.get(`${process.env.REACT_APP_BACKEND_URL}/scheduled-classes/student/future/${isAuthenticated()?._id}`, {\n            headers: {\n                Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n            }\n        }).then(res => {\n            setLoading(false);\n            if (res.status === 200) {\n                setFutureClasses(res.data?.filter(f => !f?.trialClass));\n            } else {\n                ErrorAlert(res.data.errorMessage);\n            }\n        }).catch(err => {\n            setLoading(false);\n            console.log(err)\n            ErrorAlert(err?.message);\n        })\n    }\n\n    const getPreviousClasses = async () => {\n        await axios.get(`${process.env.REACT_APP_BACKEND_URL}/scheduled-classes/student/past/${isAuthenticated()?._id}`, {\n            headers: {\n                Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n            }\n        }).then(res => {\n            setLoading(false);\n            if (res.status === 200) {\n                setPreviousClasses(res.data?.filter(f => !f?.trialClass));\n            } else {\n                ErrorAlert(res.data.errorMessage);\n            }\n        }).catch(err => {\n            setLoading(false);\n            console.log(err)\n            ErrorAlert(err?.message);\n        })\n    }\n\n\n    const fetchSubscriptions = async () => {\n        try {\n            const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/subscriptions/user/${isAuthenticated()?._id}`, {\n                headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                }\n            });\n            setSubscriptions(response.data);\n        } catch (error) {\n            console.error('Error fetching subscriptions:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchSubscriptions();\n        getFutureClasses();\n        getPreviousClasses();\n        getCancelledClasses();\n    }, []);\n\n    useEffect(() => {\n        const checkExpiry = async () => {\n            const now = new Date();\n            for (let subscription of subscriptions) {\n                const expiryDate = new Date(subscription.expiryDate);\n                if (expiryDate < now && subscription.status !== 'expired') {\n                    try {\n                        await axios.put(`${process.env.REACT_APP_BACKEND_URL}/subscriptions/update-status/${subscription._id}`, { status: \"expired\" }, {\n                            headers: {\n                                Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n                            }\n                        }).then(res => {\n                            if (res.status === 200) {\n                                fetchSubscriptions();\n                            }\n                        })\n                    } catch (error) {\n                        console.error('Error updating subscription status:', error);\n                    }\n                }\n            }\n        };\n\n        checkExpiry();\n    }, [subscriptions]);\n\n    return (\n        <div className=\"subscriptions-container\">\n            <div className=\"container\">\n                <div className='text-center mt-4'>\n                    <h4>Buy Subscription</h4>\n                    <Button className='btn h-auto py-2 px-5 mt-3' type='primary' onClick={() => router(\"/subscription\")}>Buy Now</Button>\n                </div>\n                <List\n                    grid={{ gutter: 16, column: 1 }}\n                    dataSource={subscriptions}\n                    className=\"mt-2\"\n                    renderItem={subscription => (\n                        <List.Item>\n                            <div className='subscriptionsItem'>\n                                <h3>Active Plan</h3>\n                                <div className='inner'>\n                                    <h2>{subscription?.plan}</h2>\n                                    <p className='mb-4'><b>{subscription?.classesPerMonth} sessions</b> per month</p>\n                                    {\n                                        subscription?.status === \"expired\" ?\n                                            <div className='subsctiptionStatus expired'>\n                                                <p>Your subscription has been expired on <b>{moment(subscription.expiryDate).format(\"MMMM DD, YYYY\")}</b></p>\n                                            </div>\n                                            :\n                                            <div className='subsctiptionStatus'>\n                                                <p>Your subscription will expire on <b>{moment(subscription.expiryDate).format(\"MMMM DD, YYYY\")}</b></p>\n                                            </div>\n                                    }\n                                    <div className='items'>\n                                        <div className='item'>\n                                            <h5>{previousClasses?.length + futureClasses?.length}/{subscription?.classesPerMonth}</h5>\n                                            <p>Total sessions left</p>\n                                        </div>\n                                        <div className='item'>\n                                            <h5>{cancelledClasses?.length}</h5>\n                                            <p>Sessions Cancelled</p>\n                                        </div>\n                                        <div className='item'>\n                                            <h5>{currentMonthCancelledClasses?.length}</h5>\n                                            <p>Monthly Cancelled Sessions</p>\n                                        </div>\n                                        <div className='item'>\n                                            <h5>{moment(subscription.expiryDate).format(\"MMMM DD, YYYY\")}</h5>\n                                            <p>Expires on</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </List.Item>\n                    )}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default MySubscriptions;\n"],"names":["SuccessAlert","messages","message","success","className","content","duration","style","marginTop","ErrorAlert","error","MySubscriptions","router","useNavigate","subscriptions","setSubscriptions","useState","loading","setLoading","cancelledClasses","setCancelledClasses","currentMonthCancelledClasses","setCurrentMonthCancelledClasses","futureClasses","setFutureClasses","previousClasses","setPreviousClasses","fetchSubscriptions","async","_isAuthenticated4","response","axios","get","concat","process","isAuthenticated","_id","headers","Authorization","localStorage","getItem","data","console","useEffect","_isAuthenticated2","then","res","_res$data2","status","filter","f","trialClass","errorMessage","catch","err","log","getFutureClasses","_isAuthenticated3","_res$data3","getPreviousClasses","_isAuthenticated","_res$data","currentMonthStart","moment","startOf","toDate","nextMonthStart","add","studentCurrentMonthClasses","scheduledClass","classDate","date","getCancelledClasses","now","Date","subscription","expiryDate","put","checkExpiry","_jsx","children","_jsxs","Button","type","onClick","List","grid","gutter","column","dataSource","renderItem","Item","plan","classesPerMonth","format","length"],"sourceRoot":""}